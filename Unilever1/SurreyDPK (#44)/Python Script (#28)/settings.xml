<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="import tkinter as tk%%00010from tkinter import ttk%%00010import tkinter.filedialog as fd%%00010import pandas as pd%%00010pd.options.mode.chained_assignment = None  # default='warn'%%00010import os%%00010import matplotlib.pyplot as plt%%00010from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk%%00010from matplotlib.backend_bases import key_press_handler%%00010from matplotlib.figure import Figure%%00010import numpy as np%%00010from docx import Document%%00010from docx.shared import Pt%%00010import configparser%%00010from configparser import ConfigParser%%00010import shutil%%00010%%00010df = input_table_1.copy()%%00010df2 = input_table_2.copy()%%00010CHEM_MW = float(df2.loc['Row0', 'CHEM_MW'])%%00010%%00010#df2_dict = df2.to_dict('list')%%00010time = df['time']%%00010time = [i/3600 for i in time]%%00010depth_1 = input_table_3['0']%%00010depth_2 = input_table_4['0']%%00010depth_3 = input_table_5['0']%%00010flux_vh_sc = df['flux_vh_sc']%%00010flux_sc_ve = df['flux_sc_ve']%%00010flux_ve_de = df['flux_ve_de']%%00010flux_de_receptor = df['flux_de_receptor']%%00010t_range = input_table_9['0']%%00010t_range1 = input_table_13['0']%%00010%%00010massevap = df['evap']%%00010mass0 = df['mass0']%%00010mass1 = df['mass1']%%00010mass2 = df['mass2']%%00010mass3 = df['mass3']%%00010mass4 = df['mass4']%%00010total_mass = df['total_mass']*100%%00010%%00010window = tk.Tk()%%00010 %%00010window.title('My Window')%%00010 %%00010window.geometry('600x450')%%00010%%00010menubar = tk.Menu(window)%%00010%%00010locationmenu = tk.Menu(menubar, tearoff=0)%%00010menubar.add_cascade(label='Project', menu=locationmenu, state=tk.DISABLED)%%00010 %%00010filemenu = tk.Menu(menubar, tearoff=0)%%00010menubar.add_cascade(label='Parameters', menu=filemenu, state=tk.DISABLED)%%00010%%00010editmenu = tk.Menu(menubar, tearoff=0)%%00010menubar.add_cascade(label='Run', menu=editmenu, state=tk.DISABLED)%%00010%%00010f = Figure(figsize=(5,3), dpi=100)%%00010canvas = FigureCanvasTkAgg(f, master=window)%%00010toolbar = NavigationToolbar2Tk(canvas, window)%%00010def flux():%%00010    global f%%00010    f.clf()%%00010    a = f.add_subplot(111) %%00010    a.plot(time[1:], flux_vh_sc[1:], '.-', label = 'flux from vehicle to stratum corneum',linewidth=0.5)%%00010    a.plot(time[1:], flux_sc_ve[1:], '.-', label = 'flux from stratum corneum to viable epidermis',linewidth=0.5)%%00010    a.plot(time[1:], flux_ve_de[1:], '.-', label = 'flux from viable epidermis to dermis',linewidth=0.5)%%00010    a.plot(time[1:], flux_de_receptor[1:], '.-', label = 'flux from dermis to receptor fluid',linewidth=0.5)%%00010    a.set_xlabel('time (h)', fontsize=10)%%00010    a.set_ylabel('flux (mol/$\mathregular{m^2}$ s)', fontsize=10)%%00010    a.legend(fontsize=8)%%00010    %%00010    canvas.draw()    %%00010    canvas.get_tk_widget().pack(side=tk.TOP, %%00010                            fill=tk.BOTH, %%00010                            expand=tk.YES)                          %%00010    toolbar.update()%%00010%%00010def fluxExport():%%00010    folder_path = df2.loc['Row0','location']  # open file%%00010    df = pd.DataFrame({'time (h)': time[1:], 'flux from vehicle to stratum corneum (mol/m^2 s)': flux_vh_sc[1:], 'flux from stratum corneum to viable epidermis (mol/m^2 s)': flux_sc_ve[1:], 'flux from viable epidermis to dermis (mol/m^2 s)':flux_ve_de[1:], 'flux from dermis to receptor fluid (mol/m^2 s)':flux_de_receptor[1:]})%%00010    df.to_excel(folder_path+r'/_flux.xlsx')%%00010%%00010def concentration_sc():%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;concentration_sc&quot;)%%00010    root.geometry('600x530')%%00010    cvs = tk.Canvas(root, width=600, height=80, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root, text='time (min)')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(280, pointer, window=label)%%00010    pointer += 30%%00010    dv = tk.Entry(root)%%00010    cvs.create_window(280, pointer, window=dv, width=150)%%00010    f1 = Figure(figsize=(5,3), dpi=100)%%00010    canvas = FigureCanvasTkAgg(f1, master=root)%%00010    toolbar = NavigationToolbar2Tk(canvas, root)%%00010    index = len(t_range)-1%%00010    # GUI for refresh button%%00010    def refresh1():%%00010        f1.clf()%%00010        a = f1.add_subplot(111)%%00010        nonlocal index%%00010        if (float(dv.get())*60&gt;=3600):%%00010            for i in range(len(t_range)):%%00010                if i!=len(t_range)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range[i])%%00010                j_difference = abs(float(dv.get())*60-t_range[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    print(index)%%00010                    break%%00010            a.plot(depth_1*1000, input_table_6[str(index)]*CHEM_MW, '.-', label = 'concentration in stratum corneum ('+str(t_range[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=8)%%00010            a.legend(fontsize=8)%%00010        else:                                                                                           %%00010            for i in range(len(t_range1)):%%00010                if i!=len(t_range1)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range1[i])%%00010                j_difference = abs(float(dv.get())*60-t_range1[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    break%%00009    %%00010            a.plot(depth_1*1000, input_table_10[str(index)]*CHEM_MW, '.-', label = 'concentration in stratum corneum ('+str(t_range1[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=8)%%00010            a.legend(fontsize=6)%%00010        canvas.draw()%%00010        canvas.get_tk_widget().pack(side=tk.TOP, %%00010                                fill=tk.BOTH,%%00010                                expand=tk.YES)%%00010        toolbar.update()%%00010    def export():%%00010        folder_path = df2.loc['Row0','location']  # open file%%00010        if (float(dv.get())*60&gt;=3600):%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_1, 'concentration ('+chr(956)+'g/mL)': input_table_6[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_sc_conc('+str(t_range[index]/60)+'mins).xlsx')%%00010        else:%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_1, 'concentration ('+chr(956)+'g/mL)': input_table_10[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_sc_conc('+str(t_range1[index]/60)+'mins).xlsx')%%00010    button = tk.Button(root, text='âŸ³', command=refresh1, font=('helvetica', 10))%%00010    cvs.create_window(380, pointer, window=button)%%00010    button1 = tk.Button(root, text='Export', command=export, font=('helvetica', 10))    %%00010    cvs.create_window(420, pointer, window=button1)              %%00010%%00010def concentration_ve():%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;concentration_ve&quot;)%%00010    root.geometry('600x530')%%00010    cvs = tk.Canvas(root, width=600, height=80, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root, text='time (min)')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(280, pointer, window=label)%%00010    pointer += 30%%00010    dv = tk.Entry(root)%%00010    cvs.create_window(280, pointer, window=dv, width=150)%%00010    f1 = Figure(figsize=(5,3), dpi=100)%%00010    canvas = FigureCanvasTkAgg(f1, master=root)%%00010    toolbar = NavigationToolbar2Tk(canvas, root)%%00010    index = len(t_range)-1%%00010    # GUI for refresh button%%00010    def refresh1():%%00010        f1.clf()%%00010        a = f1.add_subplot(111)%%00010        nonlocal index%%00010        if (float(dv.get())*60&gt;=3600):%%00010            for i in range(len(t_range)):%%00010                if i!=len(t_range)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range[i])%%00010                j_difference = abs(float(dv.get())*60-t_range[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    break%%00010            a.plot(depth_2*1000, input_table_7[str(index)]*CHEM_MW, '.-', label = 'concentration in viable epidermis ('+str(t_range[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth ('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=8)%%00010            a.legend(fontsize=8)%%00010        else:%%00010            for i in range(len(t_range1)):%%00010                if i!=len(t_range1)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range1[i])%%00010                j_difference = abs(float(dv.get())*60-t_range1[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    break%%00010            a.plot(depth_2*1000, input_table_11[str(index)]*CHEM_MW, '.-', label = 'concentration in viable epidermis ('+str(t_range1[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth ('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=8)%%00010            a.legend(fontsize=6)   %%00010        canvas.draw()%%00010        canvas.get_tk_widget().pack(side=tk.TOP, %%00010                                fill=tk.BOTH,%%00010                                expand=tk.YES)%%00010        toolbar.update()%%00010    def export():%%00010        folder_path = df2.loc['Row0','location']  # open file%%00010        if (float(dv.get())*60&gt;=3600):%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_2, 'concentration ('+chr(956)+'g/mL)': input_table_7[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_ve_conc('+str(t_range[index]/60)+'mins).xlsx')%%00010        else:%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_2, 'concentration ('+chr(956)+'g/mL)': input_table_11[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_ve_conc('+str(t_range1[index]/60)+'mins).xlsx')               %%00010    button = tk.Button(root, text='âŸ³', command=refresh1, font=('helvetica', 10))%%00010    cvs.create_window(380, pointer, window=button)              %%00010    button1 = tk.Button(root, text='Export', command=export, font=('helvetica', 10))    %%00010    cvs.create_window(420, pointer, window=button1)%%00010    %%00010def concentration_de():%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;concentration_de&quot;)%%00010    root.geometry('600x530')%%00010    cvs = tk.Canvas(root, width=600, height=80, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root, text='time (min)')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(280, pointer, window=label)%%00010    pointer += 30%%00010    dv = tk.Entry(root)%%00010    cvs.create_window(280, pointer, window=dv, width=150)%%00010    f1 = Figure(figsize=(5,3), dpi=100)%%00010    canvas = FigureCanvasTkAgg(f1, master=root)%%00010    toolbar = NavigationToolbar2Tk(canvas, root)%%00010    index = len(t_range)-1%%00010    # GUI for refresh button%%00010    def refresh1():%%00010        f1.clf()%%00010        a = f1.add_subplot(111)%%00010        nonlocal index%%00010        if (float(dv.get())*60&gt;=3600):%%00010            for i in range(len(t_range)):%%00010                if i!=len(t_range)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range[i])%%00010                j_difference = abs(float(dv.get())*60-t_range[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    break%%00010            a.plot(depth_3*1000, input_table_8[str(index)]*CHEM_MW, '.-', label = 'concentration in dermis ('+str(t_range[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth ('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=8)%%00010            a.legend(fontsize=8)%%00010        else:%%00010            for i in range(len(t_range1)):%%00010                if i!=len(t_range1)-1:%%00010                    j=i+1%%00010                i_difference = abs(float(dv.get())*60-t_range1[i])%%00010                j_difference = abs(float(dv.get())*60-t_range1[j])%%00010                if j_difference&gt;i_difference:%%00010                    index=i%%00010                    break%%00010            a.plot(depth_3*1000, input_table_12[str(index)]*CHEM_MW, '.-', label = 'concentration in dermis ('+str(t_range1[index]/60)+'min)',linewidth=0.5)%%00010            a.set_xlabel('depth ('+chr(956)+'m)', fontsize=10)%%00010            a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010            a.tick_params(labelsize=6)%%00010            a.legend(fontsize=8)            %%00010        canvas.draw()%%00010        canvas.get_tk_widget().pack(side=tk.TOP, %%00010                                fill=tk.BOTH,%%00010                                expand=tk.YES)%%00010        toolbar.update()%%00010    def export():%%00010        folder_path = df2.loc['Row0','location']  # open file%%00010        if (float(dv.get())*60&gt;=3600):%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_3, 'concentration ('+chr(956)+'g/mL)': input_table_8[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_de_conc('+str(t_range[index]/60)+'mins).xlsx')   %%00010        else:%%00010            df = pd.DataFrame({'depth ('+chr(956)+'m)': depth_3, 'concentration ('+chr(956)+'g/mL)': input_table_12[str(index)]*CHEM_MW})%%00010            df.to_excel(folder_path+r'/_de_conc('+str(t_range1[index]/60)+'mins).xlsx')             %%00010    button = tk.Button(root, text='âŸ³', command=refresh1, font=('helvetica', 10))%%00010    cvs.create_window(380, pointer, window=button)                   %%00010    button1 = tk.Button(root, text='Export', command=export, font=('helvetica', 10))    %%00010    cvs.create_window(420, pointer, window=button1)%%00010    %%00010def massDistribution():%%00010    global f%%00010    f.clf()%%00010    a = f.add_subplot(111) %%00010    a.plot(time[0:], massevap[0:], '.-', label = 'mass fraction in atmosphere',linewidth=0.5)%%00010    a.plot(time[0:], mass0[0:], '.-', label = 'mass fraction in vehicle',linewidth=0.5)%%00010    a.plot(time[0:], mass1[0:], '.-', label = 'mass fraction in stratum corneum',linewidth=0.5)%%00010    a.plot(time[0:], mass2[0:], '.-', label = 'mass fraction in viable epidermis',linewidth=0.5)%%00010    a.plot(time[0:], mass3[0:], '.-', label = 'mass fraction in dermis',linewidth=0.5)%%00010    a.plot(time[0:], mass4[0:], '.-', label = 'mass fraction in receptor fluid',linewidth=0.5)%%00010#    a.plot(time[1:], total_mass[1:], '.-', label = 'total mass',linewidth=0.5)%%00010    a.axis(ymin=0,ymax=1)%%00010    a.set_xlabel('times (h)', fontsize=10)%%00010    a.set_ylabel('mass fraction', fontsize=10)%%00010    a.legend(fontsize=8)%%00010    %%00010    canvas.draw()%%00010    canvas.get_tk_widget().pack(side=tk.TOP,%%00010                            fill=tk.BOTH,%%00010                            expand=tk.YES)%%00010    %%00010    toolbar.update()   %%00010%%00010def massDistributionExport():%%00010    folder_path = df2.loc['Row0','location']  # open file%%00010    df = pd.DataFrame({'time (h)': time[0:], 'mass percentage in atmosphere ': massevap[0:]*100,'mass percentage in vehicle': mass0[0:]*100, 'mass percentage in stratum corneum': mass1[0:]*100, 'mass percentage in viable epidermis':mass2[0:]*100, 'mass percentage in dermis':mass3[0:]*100, 'mass percentage in receptor fluid':mass4[0:]*100})%%00010    df.to_excel(folder_path+r'/_massDistribution.xlsx')%%00010%%00010def report():%%00010    folder_path = df2.loc['Row0','location']%%00010    shutil.copyfile('/Users/bendeacon/Documents/PhD/Codes/Framework_Duo/Unilever_duo/SurreyDPK/example/config/Caffeine_CE_copy.cfg', folder_path+r'/ModelInputFile.cfg')%%00010    # Opening a document%%00010    doc = Document()%%00010    # Adding a heading%%00010    doc.add_heading('In-silico simulation of transdermal permeation')%%00010    doc.add_heading('Parameters in simulation')%%00010    # Adding a break%%00010    paragraph = doc.add_paragraph('')%%00010    # Adding a heading 3%%00010    doc.add_heading('Simulation condition', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=5, cols=2)%%00010#    table.style = 'Medium Grid 1 Accent 1'%%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Parameters'%%00010    hdr_cells[1].text = 'Value'%%00010    hdr_cells = table.rows[1].cells%%00010    hdr_cells[0].text = 'Simulation type'%%00010    if df2.loc['Row0', 'product_type'] == 'in-vivo(leave on skin care)':%%00010        hdr_cells[1].text = 'in-vivo(leave on)'%%00010    hdr_cells = table.rows[2].cells%%00010    hdr_cells[0].text = 'Temperature(C)' %%00010    hdr_cells[1].text = df2.loc['Row0', 'Temperature(C)']   %%00010    hdr_cells = table.rows[3].cells%%00010    hdr_cells[0].text = 'Simulation time(h)' %%00010    hdr_cells[1].text = df2.loc['Row0', 't_end(h)']    %%00010    hdr_cells = table.rows[4].cells%%00010    hdr_cells[0].text = 'Dose(ml/cm^2)' %%00010    hdr_cells[1].text = df2.loc['Row0', 'Dose(ml/cm^2)']    %%00010    for i in range(4):%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.size = Pt(10)%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.bold = False        %%00010    # Adding a heading 3%%00010    doc.add_heading('Formulation attributes', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=11, cols=2)%%00010#    table.style = 'Medium Grid 1 Accent 1'%%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Parameters'%%00010    hdr_cells[1].text = 'Value'%%00010    hdr_cells = table.rows[1].cells%%00010    hdr_cells[0].text = 'Active ingredients'%%00010    hdr_cells[1].text = df2.loc['Row0', 'active_name']%%00010    hdr_cells = table.rows[2].cells%%00010    hdr_cells[0].text = 'Smiles formula of active' %%00010    hdr_cells[1].text = df2.loc['Row0', 'smiles']  %%00010    hdr_cells = table.rows[3].cells%%00010    hdr_cells[0].text = 'Mass fraction of active' %%00010    hdr_cells[1].text = df2.loc['Row0', 'active fraction']     %%00010    hdr_cells = table.rows[4].cells%%00010    hdr_cells[0].text = 'Formulation chassis name' %%00010    hdr_cells[1].text = df2.loc['Row0', 'formulation name']    %%00010    hdr_cells = table.rows[5].cells%%00010    hdr_cells[0].text = 'Cosolvent' %%00010    hdr_cells[1].text = df2.loc['Row0', 'cosolvent']  %%00010    hdr_cells = table.rows[6].cells%%00010    hdr_cells[0].text = 'Mass fraction of cosolvent' %%00010    hdr_cells[1].text = df2.loc['Row0', 'mass_fraction_of_cosolvent'] %%00010    hdr_cells = table.rows[7].cells%%00010    hdr_cells[0].text = 'Mass fraction of water' %%00010    hdr_cells[1].text = df2.loc['Row0', 'fw']  %%00010    hdr_cells = table.rows[8].cells%%00010    hdr_cells[0].text = 'Mass fraction of oil' %%00010    hdr_cells[1].text = df2.loc['Row0', 'fo']       %%00010    hdr_cells = table.rows[9].cells%%00010    hdr_cells[0].text = 'Mass fraction of surfactants' %%00010    hdr_cells[1].text = df2.loc['Row0', 'mass_fraction_of_surfactants']    %%00010    hdr_cells = table.rows[10].cells%%00010    hdr_cells[0].text = 'pH' %%00010    hdr_cells[1].text = df2.loc['Row0', 'pH']%%00010    for i in range(10):%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.size = Pt(10)%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.bold = False     %%00010             %%00010    # Adding a heading 3%%00010    doc.add_heading('Calculated input parameters of active ingredient', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=6, cols=2)%%00010#    table.style = 'Medium Grid 1 Accent 1'%%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Parameters'%%00010    hdr_cells[1].text = 'Value'%%00010    hdr_cells = table.rows[1].cells%%00010    hdr_cells[0].text = 'Log Kow'%%00010    hdr_cells[1].text = str(round(df2.loc['Row0', 'logP'],2))%%00010    hdr_cells = table.rows[2].cells%%00010    hdr_cells[0].text = 'Formulation/water partition'%%00010    hdr_cells[1].text = str(round(df2.loc['Row0', 'KW_VH'],2)) %%00010    hdr_cells = table.rows[3].cells%%00010    hdr_cells[0].text = 'Log solubility in water log(mol/l)'%%00010    hdr_cells[1].text = str(round(df2.loc['Row0', 'logSw'],2)) %%00010    hdr_cells = table.rows[4].cells%%00010    hdr_cells[0].text = 'Solubility in formulation (mol/l)'%%00010    hdr_cells[1].text = str(round(df2.loc['Row0', 'Sf'],2)) %%00010    hdr_cells = table.rows[5].cells%%00010    hdr_cells[0].text = 'Solubility in cosolvent (mol/l)'%%00010    hdr_cells[1].text = str(round(df2.loc['Row0', 'Xm'],2))         %%00010    for i in range(5):%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.size = Pt(10)%%00010        table.rows[i+1].cells[0].paragraphs[0].runs[0].font.bold = False  %%00010    # Adding a heading 3%%00010    doc.add_heading('Results')%%00010    doc.add_heading('Flux', level=3)     %%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Excel sheet location'%%00010    hdr_cells[1].text = folder_path+r'\_flux.xlsx' %%00010    f = Figure(figsize=(6,4), dpi=100)%%00010    a = f.add_subplot(111) %%00010    a.plot(time[1:], flux_vh_sc[1:], '.-', label = 'flux from vehicle to stratum corneum',linewidth=0.5)%%00010    a.plot(time[1:], flux_sc_ve[1:], '.-', label = 'flux from stratum corneum to viable epidermis',linewidth=0.5)%%00010    a.plot(time[1:], flux_ve_de[1:], '.-', label = 'flux from viable epidermis to dermis',linewidth=0.5)%%00010    a.plot(time[1:], flux_de_receptor[1:], '.-', label = 'flux from dermis to receptor fluid',linewidth=0.5)%%00010    a.set_xlabel('time (h)', fontsize=10)%%00010    a.set_ylabel('flux (mol/$\mathregular{m^2}$ s)', fontsize=10)%%00010    a.legend(fontsize=8)   %%00010    f.savefig(folder_path+&quot;/_flux.png&quot;,pad_inches=0.8)%%00010    doc.add_picture(folder_path+&quot;/_flux.png&quot;)%%00010    # Adding a heading 3%%00010    doc.add_heading('Concentration in stratum corneum', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Excel sheet location'%%00010    hdr_cells[1].text = folder_path %%00010    f = Figure(figsize=(6,4), dpi=100)%%00010    a = f.add_subplot(111) %%00010    a.plot(depth_1*1000, input_table_10[str(2)]*CHEM_MW, '.-', label = 'concentration in stratum corneum (5min)',linewidth=0.5)%%00010    a.plot(depth_1*1000, input_table_10[str(3)]*CHEM_MW, '.-', label = 'concentration in stratum corneum (10min)',linewidth=0.5)%%00010    a.plot(depth_1*1000, input_table_10[str(10)]*CHEM_MW, '.-', label = 'concentration in stratum corneum (30min)',linewidth=0.5)%%00010    a.plot(depth_1*1000, input_table_6[str(5)]*CHEM_MW, '.-', label = 'concentration in stratum corneum (60min)',linewidth=0.5)%%00010    a.set_xlabel('depth('+chr(956)+'m)', fontsize=10)%%00010    a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010    a.tick_params(labelsize=8)%%00010    a.legend(fontsize=6)%%00010    f.savefig(folder_path+r'/_sc_conc.png',pad_inches=0.8)%%00010    doc.add_picture(folder_path+r'/_sc_conc.png')%%00010%%00010    # Adding a heading 3%%00010    doc.add_heading('concentration in viable epidermis', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Excel sheet location'%%00010    hdr_cells[1].text = folder_path %%00010    f = Figure(figsize=(6,4), dpi=100)%%00010    a = f.add_subplot(111) %%00010    a.plot(depth_2*1000, input_table_11[str(2)]*CHEM_MW, '.-', label = 'concentration in viable epidermis (5min)',linewidth=0.5)%%00010    a.plot(depth_2*1000, input_table_11[str(3)]*CHEM_MW, '.-', label = 'concentration in viable epidermis (10min)',linewidth=0.5)%%00010    a.plot(depth_2*1000, input_table_11[str(10)]*CHEM_MW, '.-', label = 'concentration in viable epidermis (30min)',linewidth=0.5)%%00010    a.plot(depth_2*1000, input_table_7[str(5)]*CHEM_MW, '.-', label = 'concentration in viable epidermis (60min)',linewidth=0.5)%%00010    a.set_xlabel('depth('+chr(956)+'m)', fontsize=10)%%00010    a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010    a.tick_params(labelsize=8)%%00010    a.legend(fontsize=6)%%00010    f.savefig(folder_path+r'/_ve_conc.png',pad_inches=0.8)%%00010    doc.add_picture(folder_path+r'/_ve_conc.png')%%00010%%00010    # Adding a heading 3%%00010    doc.add_heading('concentration in dermis', level=3)%%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Excel sheet location'%%00010    hdr_cells[1].text = folder_path %%00010    f = Figure(figsize=(6,4), dpi=100)%%00010    a = f.add_subplot(111) %%00010    a.plot(depth_3*1000, input_table_12[str(2)]*CHEM_MW, '.-', label = 'concentration in dermis (5min)',linewidth=0.5)%%00010    a.plot(depth_3*1000, input_table_12[str(3)]*CHEM_MW, '.-', label = 'concentration in dermis (10min)',linewidth=0.5)%%00010    a.plot(depth_3*1000, input_table_12[str(10)]*CHEM_MW, '.-', label = 'concentration in dermis (30min)',linewidth=0.5)%%00010    a.plot(depth_3*1000, input_table_8[str(5)]*CHEM_MW, '.-', label = 'concentration in dermis (60min)',linewidth=0.5)%%00010    a.set_xlabel('depth('+chr(956)+'m)', fontsize=10)%%00010    a.set_ylabel('concentration ('+chr(956)+'g/mL)', fontsize=10)%%00010    a.tick_params(labelsize=8)%%00010    a.legend(fontsize=6)%%00010    f.savefig(folder_path+r'/_de_conc.png',pad_inches=0.8)%%00010    doc.add_picture(folder_path+r'/_de_conc.png')%%00010%%00010    # Adding a heading 3%%00010    doc.add_heading('Mass percentage distribution', level=3)     %%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Excel sheet location'%%00010    hdr_cells[1].text = folder_path+r'\_mass_distribution.xlsx' %%00010    f = Figure(figsize=(6,4), dpi=100)%%00010    a = f.add_subplot(111) %%00010    a.plot(time[0:], massevap[0:]*100, '.-', label = 'mass fraction in atmosphere',linewidth=0.5)%%00010    a.plot(time[0:], mass0[0:]*100, '.-', label = 'mass percentage in vehicle',linewidth=0.5)%%00010    a.plot(time[0:], mass1[0:]*100, '.-', label = 'mass percentage in stratum corneum',linewidth=0.5)%%00010    a.plot(time[0:], mass2[0:]*100, '.-', label = 'mass percentage in viable epidermis',linewidth=0.5)%%00010    a.plot(time[0:], mass3[0:]*100, '.-', label = 'mass percentage in dermis',linewidth=0.5)%%00010    a.plot(time[0:], mass4[0:]*100, '.-', label = 'mass percentage in receptor fluid',linewidth=0.5)%%00010    a.axis(ymin=0,ymax=100)%%00010    a.set_xlabel('times (h)', fontsize=10)%%00010    a.set_ylabel('mass percentage', fontsize=10)%%00010    a.legend(fontsize=8)   %%00010    f.savefig(folder_path+&quot;/_mass_percentage.png&quot;,pad_inches=0.8)%%00010    doc.add_picture(folder_path+&quot;/_mass_percentage.png&quot;)%%00010%%00010    # Adding a heading 3%%00010    doc.add_heading('Mass fraction distribution', level=3)  %%00010    # Adding a table%%00010    table = doc.add_table(rows=1, cols=2)   %%00010    hdr_cells = table.rows[0].cells%%00010    hdr_cells[0].text = 'Active permibility'%%00010    hdr_cells[1].text = str(format(df2.loc['Row0', 'permibility'],'.2e'))%%00010    # save doc%%00010    doc.save(folder_path+&quot;/report.docx&quot;)%%00010%%00010def save():%%00010    folder_path = df2.loc['Row0','location']%%00010%%00010    CONFIG_FILE = &quot;/load.cfg&quot;%%00010%%00010    conf = configparser.ConfigParser()%%00010    cfg_file = open(folder_path+CONFIG_FILE, 'w')%%00010    conf.add_section(&quot;default&quot;) %%00010%%00010    conf.set(&quot;default&quot;, &quot;location&quot;, df2.loc['Row0','location'])%%00010    conf.set(&quot;default&quot;, &quot;product_type&quot;, df2.loc['Row0', 'product_type'])%%00010    conf.set(&quot;default&quot;, &quot;type&quot;, df2.loc['Row0', 'type'])%%00010    conf.set(&quot;default&quot;, &quot;active_name&quot;, df2.loc['Row0', 'active_name'])%%00010    conf.set(&quot;default&quot;, &quot;smiles&quot;, df2.loc['Row0', 'smiles'])%%00010    conf.set(&quot;default&quot;, &quot;active_fraction&quot;, df2.loc['Row0', 'active fraction'])%%00010    conf.set(&quot;default&quot;, &quot;formulation_name&quot;, df2.loc['Row0', 'formulation name'])%%00010    conf.set(&quot;default&quot;, &quot;cosolvent&quot;, df2.loc['Row0', 'cosolvent'])%%00010    conf.set(&quot;default&quot;, &quot;mass_fraction_of_cosolvent&quot;, df2.loc['Row0', 'mass_fraction_of_cosolvent'])%%00010    conf.set(&quot;default&quot;, &quot;mass_fraction_of_surfactants&quot;, df2.loc['Row0', 'mass_fraction_of_surfactants'])%%00010    conf.set(&quot;default&quot;, &quot;mass_fraction_of_insoluble&quot;, df2.loc['Row0', 'mass_fraction_of_insoluble'])%%00010    conf.set(&quot;default&quot;, &quot;mass_fraction_of_water&quot;, df2.loc['Row0', 'fw'])%%00010    conf.set(&quot;default&quot;, &quot;mass_fraction_of_oil&quot;, df2.loc['Row0', 'fo'])%%00010    conf.set(&quot;default&quot;, &quot;pH&quot;, df2.loc['Row0', 'pH'])%%00010    conf.set(&quot;default&quot;, &quot;Temperature&quot;, df2.loc['Row0', 'Temperature(C)'])%%00010    conf.set(&quot;default&quot;, &quot;t_end&quot;, df2.loc['Row0', 't_end(h)'])%%00010    conf.set(&quot;default&quot;, &quot;Does&quot;, df2.loc['Row0', 'Dose(ml/cm^2)'])%%00010    conf.set(&quot;default&quot;, &quot;M&quot;, str(df2.loc['Row0', 'M']))%%00010    conf.set(&quot;default&quot;, &quot;N&quot;, str(df2.loc['Row0', 'N']))%%00010    conf.set(&quot;default&quot;, &quot;MW&quot;,str(df2.loc['Row0', 'MW']))%%00010%%00010    conf.write(cfg_file)%%00010    cfg_file.close()%%00010    %%00010def exit():%%00010    window.destroy()%%00010    %%00010postmenu = tk.Menu(menubar, tearoff=0)%%00010submenu = tk.Menu(postmenu)%%00010submenu1 = tk.Menu(postmenu)%%00010submenu2 = tk.Menu(postmenu)%%00010menubar.add_cascade(label='Post', menu=postmenu)%%00010postmenu.add_cascade(label='flux_with_time_change', menu=submenu1, underline=0)%%00010submenu1.add_command(label='Show', command=flux)%%00010submenu1.add_command(label='Export', command=fluxExport)%%00010%%00010postmenu.add_cascade(label='concentration_distribution', menu=submenu, underline=0)%%00010submenu.add_command(label='concentration in stratum corneum', command=concentration_sc) %%00010submenu.add_command(label='concentration in viable epidermis', command=concentration_ve) %%00010submenu.add_command(label='concentration in dermis', command=concentration_de)%%00010if df2['product_type'][0] == 'in-vitro(infinite does)':%%00010    postmenu.add_command(label='mass_percentage_distribution', command=massDistribution, state=tk.DISABLED)%%00010else:%%00010    postmenu.add_cascade(label='mass_percentage_distribution', menu=submenu2, underline=0)%%00010    submenu2.add_command(label='Show', command=massDistribution)%%00010    submenu2.add_command(label='Export', command=massDistributionExport)%%00010    %%00010postmenu.add_separator()%%00010postmenu.add_command(label='Generate report', command=report) %%00010postmenu.add_command(label='Save Project', command=save)%%00010postmenu.add_command(label='Exit', command=exit) %%00010%%00010window.config(menu=menubar)%%00010 %%00010window.mainloop()%%00010%%00010output_table_1 = df"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Visualize calculated properties"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="457"/>
        <entry key="y-coordinate" type="xint" value="226"/>
        <entry key="width" type="xint" value="167"/>
        <entry key="height" type="xint" value="15"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.1.0.v202303131021"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.1.0.v202307110639"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_1">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_2">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_3">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_4">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_5">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_6">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_7">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_8">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_9">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_10">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_11">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_12">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_13">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script (legacy)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
