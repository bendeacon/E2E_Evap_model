<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="import tkinter as tk%%00010from tkinter import ttk%%00010import tkinter.filedialog as fd%%00010import pandas as pd%%00010pd.options.mode.chained_assignment = None  # default='warn'%%00010import os%%00010import pymysql%%00010from configparser import ConfigParser%%00010%%00010# connect database%%00010db = pymysql.connect(host='localhost',%%00010                     user='root',%%00010                     password='',%%00010                     database='knimeproject')%%00010%%00010cursor = db.cursor()%%00010%%00010table1 = input_table_1.copy()%%00010# dictionary of properties%%00010properties1 = {%%00010%%00009'smiles': '',%%00010#%%00009'molecular_weight': '',%%00010}%%00010%%00010properties2 = {%%00010%%00009'cosolvent': '',%%00010%%00009'mass_fraction_of_cosolvent': '',%%00010%%00009'mass_fraction_of_water': '', %%00010%%00009'mass_fraction_of_oil': '',%%00010%%00009'mass_fraction_of_surfactants': '',%%00010%%00009'mass_fraction_of_insoluble': '',%%00010%%00009'pH': '',%%00010%%00009'active fraction': '',%%00010}%%00010%%00010properties2Copy = {%%00010%%00009'cosolvent': '',%%00010%%00009'mass_fraction_of_cosolvent': '',%%00010%%00009'mass_fraction_of_water': '', %%00010%%00009'mass_fraction_of_oil': '',%%00010%%00009'mass_fraction_of_surfactants': '',%%00010%%00009'mass_fraction_of_insoluble': '',%%00010%%00009'pH': '',%%00010%%00009'mass_fraction_of active': '',%%00010}%%00010%%00010properties3 = {%%00010    'Temperature(C)': '',%%00010    't_end(h)': '',%%00010    'Dose(ml/cm^2)': '',%%00010}%%00010%%00010properties4 = {%%00010    'SC_thickness': '',%%00010    'VE_thickness': '',%%00010    'DE_thickness': '',%%00010    'Sink_thickness': '',%%00010}%%00010%%00010properties5 = {%%00010    'SC_thickness': '',%%00010    'VE_thickness': '',%%00010    'DE_thickness': '',%%00010    'system circulation': '',%%00010}%%00010%%00010# dictionary of properties%%00010properties = {%%00010%%00009'product type': '',%%00010%%00009'active_name': '',%%00010%%00009'smiles': '',%%00010%%00009'active fraction': '',%%00010%%00009'formulation name': '',    %%00010%%00009'cosolvent': '',%%00010%%00009'mass_fraction_of_cosolvent': '',%%00010%%00009'mass_fraction_of_water': '', %%00010%%00009'mass_fraction_of_oil': '',%%00010%%00009'mass_fraction_of_surfactants': '',%%00010%%00009'mass_fraction_of_insoluble': '',%%00010%%00009'pH': '',%%00010}%%00010%%00010layers = {%%00010    '0': 'Dose(ml/cm^2)',%%00010}%%00010%%00010layers1 = {%%00010    '1': 'SC_thickness',%%00010    '2': 'VE_thickness',%%00010    '3': 'DE_thickness',%%00010    '4': 'Sink_thickness',%%00010}%%00010%%00010layers2 = {%%00010    '1': 'SC_thickness',%%00010    '2': 'VE_thickness',%%00010    '3': 'DE_thickness',%%00010    '4': 'system circulation',%%00010}%%00010%%00010df = pd.DataFrame(properties, index=[&quot;values&quot;])%%00010%%00010def exposure_leaveon():%%00010    global df%%00010    #C:\\Users\\dz0004\\E2E_Unilever_project\\source_code\\SurreyDPK\\example%%00010    rootpath = &quot;/Users/bendeacon/Documents/PhD/Codes/Framework_Duo/Unilever_duo/SurreyDPK/example&quot;%%00010    zz = rootpath + &quot;/config/&quot;%%00010    # read interested parameters from config%%00010    with open(zz + 'Caffeine_CE.cfg', 'r') as rf:%%00010        for line in rf:%%00010            line = line.split()%%00010            if not line or line[0] == '#':%%00010                continue%%00010            if line[0] == 'COMP' and line[1] == '0':%%00010                layer = layers[line[1]]%%00010                properties3[layer] = line[2]%%00010            elif line[0] == 't_end':%%00010                properties3['t_end(h)'] = line[1]%%00010    try:%%00010        properties3['Temperature(C)']=df.loc['values', 'Temperature(C)']%%00010        properties3['t_end(h)']=df.loc['values', 't_end(h)']%%00010        properties3['Dose(ml/cm^2)']=df.loc['values', 'Dose(ml/cm^2)']%%00010    except:%%00010        print('no default input')%%00010        %%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Specify exposure parameters&quot;)%%00010    cvs = tk.Canvas(root, width=340, height=400, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    loc = [90+i*70 for i in range(3)]%%00010%%00010    label = tk.Label(root, text='Exposure parameters')%%00010    label.config(font=('helvetica', 12))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 20%%00010    label = tk.Label(root, text='(Leave on)')%%00010    label.config(font=('helvetica', 11))%%00010    cvs.create_window(170, pointer, window=label)    %%00010%%00010    for i, property in enumerate(properties3.keys()):%%00010%%00010        pointer = loc[i]%%00010        label = tk.Label(root, text=property)%%00010        label.config(font=('helvetica', 10))%%00010        cvs.create_window(170, pointer, window=label)%%00010        pointer += 30%%00010%%00010        entry = tk.Entry(root)%%00010        entry.delete(0, tk.END)%%00010        entry.insert(0, properties3[property])%%00010        cvs.create_window(170, pointer, window=entry, width=120)%%00010        entries.append(entry)%%00010    %%00010    def printer():%%00010        for i, property in enumerate(properties3.keys()):%%00010            entry = entries[i]%%00010            df.loc['values', property] = entry.get()%%00010        root.destroy()%%00010%%00010    button = tk.Button(root, text='Accept', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer+70, window=button)%%00010%%00010    root.mainloop()%%00010%%00010def exposure_washoff():%%00010    global df%%00010    rootpath = &quot;/Users/bendeacon/Documents/PhD/Codes/Framework_Duo/Unilever_duo/SurreyDPK/example&quot;%%00010    zz = rootpath + &quot;/config/&quot;%%00010    # read interested parameters from config%%00010    with open(zz + 'Caffeine_CE.cfg', 'r') as rf:%%00010        for line in rf:%%00010            line = line.split()%%00010            if not line or line[0] == '#':%%00010                continue%%00010            if line[0] == 'COMP' and line[1] == '0':%%00010                layer = layers[line[1]]%%00010                properties3[layer] = line[2]%%00010            elif line[0] == 't_end':%%00010                properties3['t_end(h)'] = line[1]%%00010%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Specify exposure parameters&quot;)%%00010    cvs = tk.Canvas(root, width=340, height=450, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    loc = [90+i*70 for i in range(4)]%%00010%%00010    label = tk.Label(root, text='Exposure parameters')%%00010    label.config(font=('helvetica', 12))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 20%%00010    label = tk.Label(root, text='(Wash off)')%%00010    label.config(font=('helvetica', 11))%%00010    cvs.create_window(170, pointer, window=label)  %%00010%%00010    properties_washoff = {%%00010        'Temperature(C)': '',%%00010        't_end(h)': '',%%00010        'exposure time (h)': '',%%00010        'Vehicle_thickness(ml/cm^2)': '',%%00010%%00009}%%00010    for i, property in enumerate(properties_washoff.keys()):%%00010%%00010        pointer = loc[i]%%00010        label = tk.Label(root, text=property)%%00010        label.config(font=('helvetica', 10))%%00010        cvs.create_window(170, pointer, window=label)%%00010        pointer += 30%%00010%%00010        entry = tk.Entry(root)%%00010        entry.delete(0, tk.END)%%00010        entry.insert(0, properties_washoff[property])%%00010        cvs.create_window(170, pointer, window=entry, width=120)%%00010        entries.append(entry)%%00010    %%00010    def printer():%%00010        for i, property in enumerate(properties_washoff.keys()):%%00010            entry = entries[i]%%00010            df.loc['values', property] = entry.get()%%00010        root.destroy()%%00010%%00010    button = tk.Button(root, text='Accept', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer+70, window=button)%%00010%%00010    root.mainloop()%%00010%%00010def products_leaveon():%%00010    global df%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Specify product type&quot;)%%00010    %%00010    cvs = tk.Canvas(root, width=340, height=300, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root,text='Specify product type')%%00010    label.config(font=('helvetica', 12))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 60%%00010    label = tk.Label(root,text='product type')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 30%%00010    dv = ttk.Combobox(root)%%00010    list1 = ['in-vivo(leave on skin care)', 'in-vivo(pharmaceutical open)', 'in-vivo(occlusive)', 'in-vitro(finite does)', 'in-vitro(infinite does)']%%00010    dv['value'] = list1%%00010    %%00010    try:%%00010        for i in range(len(list1)):%%00010            if list1[i] == df.loc['values', 'product_type']:%%00010                dv.current(i)%%00010    except:%%00010        print('no default input')%%00010%%00010    cvs.create_window(170, pointer, window=dv, width=200)%%00010    entries.append(dv)%%00010    pointer += 60   %%00010%%00010    def printer():%%00010        entry = entries[0]%%00010        df.loc['values', 'product_type'] = entry.get()%%00010        df.loc['values', 'type'] = 'leave_on'%%00010        root.destroy()%%00010        exposure_leaveon()%%00010        %%00010    b = tk.Button(root, text='Accept', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=b)%%00010%%00010def products_washoff():%%00010    global df%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Specify product type&quot;)%%00010    %%00010    cvs = tk.Canvas(root, width=340, height=300, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root,text='Specify product type')%%00010    label.config(font=('helvetica', 12))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 60%%00010    label = tk.Label(root,text='product type')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 30%%00010    dv = ttk.Combobox(root)%%00010    dv['value'] = ['in-vivo(wash off skin care)', 'in-vivo(pharmaceutical open)', 'in-vivo(occlusive)', 'in-vitro(finite does)', 'in-vitro(infinite does)']%%00010    dv.current(0)%%00010    cvs.create_window(170, pointer, window=dv, width=200)%%00010    entries.append(dv)%%00010    pointer += 60   %%00010%%00010    def printer():%%00010        entry = entries[0]%%00010        df.loc['values', 'product_type'] = entry.get()%%00010        df.loc['values', 'type'] = 'wash_off'%%00010        root.destroy()%%00010        exposure_washoff()%%00010        %%00010    b = tk.Button(root, text='Accept', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=b)%%00010%%00010def formulation():%%00010    global df%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Specify active and formulation&quot;)%%00010    cvs = tk.Canvas(root, width=500, height=700, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    # GUI for active%%00010    sql = &quot;SELECT * FROM ACTIVE&quot;%%00010%%00010    try:%%00010       # execute sql%%00010       cursor.execute(sql)%%00010       # get all data%%00010       smiles = cursor.fetchall() %%00010    except:%%00010       print (&quot;Error: unable to fetch data&quot;)%%00010   %%00010    activeNameList = []%%00010    for smile in smiles:%%00010        activeNameList.append(smile[0])%%00010%%00010    label = tk.Label(root, text='Active name')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(250, pointer, window=label)%%00010    pointer += 30%%00010    dv = ttk.Combobox(root)%%00010    dv['value'] = activeNameList%%00010    cvs.create_window(250, pointer, window=dv, width=150)%%00010    for i in range(len(activeNameList)):%%00010        if activeNameList[i] == df.loc['values', 'active_name']:%%00010            dv.current(i)%%00010               %%00010    entries.append(dv)%%00010%%00010    # GUI for refresh button%%00010    def refresh1():%%00010        sql = 'SELECT * FROM ACTIVE WHERE NAME = &quot;'+entries[0].get()+'&quot;' %%00010        try:%%00010            # execute sql%%00010            cursor.execute(sql)%%00010            # get all data%%00010            results = cursor.fetchall()%%00010        except:%%00010            print (&quot;Error: unable to fetch data&quot;)%%00010        for i, property in enumerate(properties1.keys()):%%00010            D = i%2%%00010            if results:%%00010                entries[i+1].delete(0, tk.END)%%00010                entries[i+1].insert(0, results[0][i+1])%%00010                cvs.create_window(250+D*230, pointer1, window=entries[i+1], width=250)%%00010%%00010    button = tk.Button(root, text='⟳', command=refresh1, font=('helvetica', 10))%%00010    cvs.create_window(350, pointer, window=button)%%00010%%00010    sql = 'SELECT * FROM ACTIVE WHERE NAME = &quot;'+entries[0].get()+'&quot;' %%00010%%00010    try:%%00010       # execute sql%%00010       cursor.execute(sql)%%00010       # get all data%%00010       results = cursor.fetchall()%%00010    except:%%00010       print (&quot;Error: unable to fetch data&quot;)%%00010%%00010    pointer += 40%%00010    pointer1 = pointer + 30%%00010    for i, property in enumerate(properties1.keys()):%%00010        D = i%2%%00010        label = tk.Label(root, text=property)%%00010        label.config(font=('helvetica', 10))%%00010        cvs.create_window(250+D*230, pointer, window=label)%%00010        entry = tk.Entry(root)%%00010        if results:%%00010            entry.delete(0, tk.END)%%00010            entry.insert(0, results[0][i+1])%%00010            %%00010        cvs.create_window(250+D*230, pointer1, window=entry, width=250)%%00010        entries.append(entry)%%00010%%00010    # GUI for formulation chassis name%%00010    sql = &quot;SELECT * FROM FORMULATION&quot;%%00010%%00010    try:%%00010       # execute sql%%00010       cursor.execute(sql)%%00010       # get all data%%00010       formulations = cursor.fetchall()%%00010    except:%%00010       print (&quot;Error: unable to fetch data&quot;)%%00010%%00010    formulationNameList = []%%00010    for formulation in formulations:%%00010        formulationNameList.append(formulation[0])%%00010    %%00010    pointer = 190%%00010    label = tk.Label(root, text='Formulation chassis name')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(250, pointer, window=label)%%00010    pointer += 30%%00010    dv = ttk.Combobox(root)%%00010    dv['value'] = formulationNameList%%00010    cvs.create_window(250, pointer, window=dv, width=150)%%00010    for i in range(len(formulationNameList)):%%00010        if formulationNameList[i] == df.loc['values', 'formulation name']:%%00010            dv.current(i)%%00010    entries.append(dv)%%00010%%00010    loc = [280+i*80 for i in range(8)]   %%00010    # GUI for refresh2 button%%00010    def refresh2():%%00010        sql = 'SELECT * FROM FORMULATION WHERE NAME = &quot;'+entries[2].get()+'&quot;' %%00010        try:%%00010            # execute sql%%00010            cursor.execute(sql)%%00010            # get all data%%00010            results = cursor.fetchall()%%00010        except:%%00010            print (&quot;Error: unable to fetch data&quot;)%%00010            %%00010        for i, property in enumerate(properties2.keys()):%%00010            D, R = i%2, i//2%%00010            if results:%%00010                entries[i+3].delete(0, tk.END)%%00010                entries[i+3].insert(0, results[0][i+1])%%00010                cvs.create_window(130+D*230, loc[R]+30, window=entries[i+3], width=200)%%00010   %%00010    button = tk.Button(root, text='⟳', command=refresh2, font=('helvetica', 10))%%00010    cvs.create_window(350, pointer, window=button)%%00010%%00010    sql = 'SELECT * FROM FORMULATION WHERE NAME = &quot;'+entries[2].get()+'&quot;' %%00010    try:%%00010        # execute sql%%00010        cursor.execute(sql)%%00010        # get all data%%00010        results = cursor.fetchall()%%00010    except:%%00010        print (&quot;Error: unable to fetch data&quot;)%%00010    %%00010    for i, property in enumerate(properties2Copy.keys()):%%00010%%00010        D, R = i%2, i//2%%00010        pointer = loc[R]%%00010        label = tk.Label(root, text=property)%%00010        label.config(font=('helvetica', 10))%%00010        cvs.create_window(130+D*230, pointer, window=label)%%00010        pointer += 30%%00010        if property == 'cosolvent':%%00010            dv = ttk.Combobox(root)%%00010            dv['value'] = table1['cosolvent'].values.tolist()%%00010            cvs.create_window(130+D*230, pointer, window=dv, width=200)%%00010            if results:%%00010                for i in range(len(table1['cosolvent'].values.tolist())):%%00010                    if table1['cosolvent'].values.tolist()[i] == results[0][1]:%%00010                        dv.current(i)%%00010            entries.append(dv)%%00010        else:%%00010%%00009        entry = tk.Entry(root)%%00010%%00009        if results:%%00010%%00009    %%00009    entry.delete(0, tk.END)%%00010%%00009    %%00009    entry.insert(0,results[0][i+1])%%00010%%00009        cvs.create_window(130+D*230, pointer, window=entry, width=200)%%00010%%00009        entries.append(entry)%%00010%%00010    #GUI for submit button%%00010    def printer():%%00010        entry = entries[0]%%00010        df.loc['values', 'active_name'] = entry.get()%%00010        for i, property in enumerate(properties1.keys()):%%00010            entry = entries[i+1]%%00010            df.loc['values', property] = entry.get()%%00010        entry = entries[2]%%00010        df.loc['values', 'formulation name'] = entry.get()   %%00010        for i, property in enumerate(properties2.keys()):%%00010            entry = entries[i+3]%%00010            df.loc['values', property] = entry.get()%%00010        root.destroy()%%00010%%00010    button = tk.Button(root, text='Accept', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(250, pointer+70, window=button)%%00010    %%00010    root.mainloop()%%00010%%00010    cosolvent = df.loc['values', 'cosolvent']%%00010%%00010    # filter the data table using the entered cosolvent%%00010    value_list = [cosolvent]%%00010    boolean_series = table1.cosolvent.isin(value_list)%%00010    filtered_table = table1[boolean_series]%%00010    Index = filtered_table.index.values[0]%%00010    filtered_table.rename(index={Index: 'values'}, inplace=True)%%00010    filtered_table.drop(['cosolvent'],axis=1, inplace=True)%%00010%%00010    df = pd.concat([df, filtered_table], axis = 1)%%00010%%00010def location():%%00010    global df%%00010    entries = []%%00010    root = tk.Tk()%%00010    root.title(&quot;Create project&quot;)%%00010    %%00010    cvs = tk.Canvas(root, width=340, height=300, relief='raised')%%00010    cvs.pack()%%00010    # GUI to view and modify parameters, and store them into the dataframe (df)%%00010    pointer = 30%%00010%%00010    label = tk.Label(root,text='Create project')%%00010    label.config(font=('helvetica', 12))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 60%%00010    label = tk.Label(root,text='Location')%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=label)%%00010%%00010    pointer += 30%%00010    dv = tk.Entry(root)%%00010    cvs.create_window(170, pointer, window=dv, width=280)%%00010    entries.append(dv)%%00010    pointer += 60   %%00010    %%00010    def printer():%%00010        entry = entries[0]%%00010        folder = os.path.exists(entry.get())%%00010        if not folder:                  %%00010            os.makedirs(entry.get())%%00010        df.loc['values', 'location'] = entry.get()%%00010        root.destroy()%%00010        %%00010    b = tk.Button(root, text='Create', command=printer, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer, window=b)%%00010%%00010def select():%%00010    root = tk.Tk()%%00010    root.withdraw()%%00010    Filepath = fd.askopenfilename(filetypes=[('load','*.cfg')])%%00010    %%00010    config_parser = ConfigParser()%%00010    config_parser.read(Filepath)%%00010    config = config_parser['default']%%00010    %%00010    df.loc['values', 'location'] = config['location']%%00010    df.loc['values', 'product_type'] = config['product_type']%%00010    df.loc['values', 'type'] = config['type']%%00010    df.loc['values', 'active_name'] = config['active_name']%%00010    df.loc['values', 'smiles'] = config['smiles']%%00010    df.loc['values', 'active fraction'] = config['active_fraction']%%00010    df.loc['values', 'formulation name'] = config['formulation_name']%%00010    df.loc['values', 'cosolvent'] = config['cosolvent']%%00010    df.loc['values', 'mass_fraction_of_cosolvent'] = config['mass_fraction_of_cosolvent']%%00010    df.loc['values', 'mass_fraction_of_surfactants'] = config['mass_fraction_of_surfactants']%%00010    df.loc['values', 'mass_fraction_of_insoluble'] = config['mass_fraction_of_insoluble']%%00010    df.loc['values', 'mass_fraction_of_water'] = config['mass_fraction_of_water']%%00010    df.loc['values', 'mass_fraction_of_oil'] = config['mass_fraction_of_oil']%%00010    df.loc['values', 'pH'] = config['ph']%%00010    df.loc['values', 'Temperature(C)'] = config['temperature']%%00010    df.loc['values', 't_end(h)'] = config['t_end']%%00010    df.loc['values', 'Dose(ml/cm^2)'] = config['does']%%00010    df.loc['values', 'M'] = float(config['m'])%%00010    df.loc['values', 'N'] = float(config['n'])%%00010    df.loc['values', 'MW'] = float(config['mw'])%%00010%%00010    if df.loc['values', 'type'] == 'leave_on':%%00010        submenu.entryconfig(&quot;wash off&quot;,state=&quot;disabled&quot;)%%00010    if df.loc['values', 'type'] == 'wash off':%%00010        submenu.entryconfig(&quot;Leave on&quot;,state=&quot;disabled&quot;)%%00010    root.destroy()%%00010    %%00010rootpath = &quot;/Users/bendeacon/Documents/PhD/Codes/Framework_Duo/Unilever_duo/SurreyDPK/example&quot;%%00010zz = rootpath + &quot;/config/&quot;%%00010# read interested parameters from config%%00010with open(zz + 'Caffeine_CE.cfg', 'r') as rf:%%00010    for line in rf:%%00010        line = line.split()%%00010        if not line or line[0] == '#':%%00010            continue%%00010        if line[0] == 'COMP' and line[1]!='0':%%00010            layer = layers1[line[1]]%%00010            properties4[layer] = line[2]%%00010            layer = layers2[line[1]]%%00010            properties5[layer] = line[2]%%00010%%00010def printer1():%%00010    for i, property in enumerate(properties4.keys()):%%00010        df.loc['values', property] = properties4[property]%%00010%%00010printer1()%%00010%%00010def exit():%%00010    window.destroy()%%00010    %%00010window = tk.Tk()%%00010 %%00010window.title('My Window')%%00010 %%00010window.geometry('500x300')  %%00010 %%00010menubar = tk.Menu(window)%%00010%%00010projectmenu = tk.Menu(menubar, tearoff=0)%%00010menubar.add_cascade(label='Project', menu=projectmenu)%%00010projectmenu.add_command(label='New Project', command=location)%%00010projectmenu.add_command(label='Open', command=select)%%00010filemenu = tk.Menu(menubar, tearoff=0)%%00010submenu = tk.Menu(filemenu)%%00010menubar.add_cascade(label='Parameters', menu=filemenu)%%00010 %%00010#filemenu.add_command(label='Products', command=products)%%00010filemenu.add_cascade(label='Products &amp; Exposure', menu=submenu, underline=0) %%00010submenu.add_command(label='Leave on', command=products_leaveon) %%00010submenu.add_command(label='wash off', command=products_washoff) %%00010filemenu.add_command(label='Formulation', command=formulation)%%00010#filemenu.add_cascade(label='Exposure', menu=submenu, underline=0) %%00010#submenu.add_command(label='Leave on', command=exposure) %%00010#submenu.add_command(label='wash off', command=exposure_washoff) %%00010%%00010editmenu = tk.Menu(menubar, tearoff=0)%%00010%%00010menubar.add_cascade(label='Run', menu=editmenu)%%00010editmenu.add_command(label='Submit', command=exit)%%00010%%00010postmenu = tk.Menu(menubar, tearoff=0)%%00010menubar.add_cascade(label='Post', menu=postmenu, state=tk.DISABLED)%%00010%%00010window.config(menu=menubar)%%00010 %%00010window.mainloop()%%00010#close database%%00010db.close()%%00010%%00010output_table_1 = df"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="type products GUI"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="233"/>
        <entry key="y-coordinate" type="xint" value="302"/>
        <entry key="width" type="xint" value="106"/>
        <entry key="height" type="xint" value="15"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.1.0.v202303131021"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.1.0.v202307110639"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script (legacy)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
