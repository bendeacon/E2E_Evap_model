<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import tkinter as tk%%00010import pandas as pd%%00010pd.options.mode.chained_assignment = None  # default='warn'%%00010import os%%00010%%00010table1 = input_table_1.copy()%%00010# dictionary of properties%%00010properties1 = {%%00010    'SC_thickness': '',%%00010    'VE_thickness': '',%%00010    'DE_thickness': '',%%00010    'Sink_thickness': '',%%00010}%%00010%%00010properties2 = {%%00010    'SC_thickness': '',%%00010    'VE_thickness': '',%%00010    'DE_thickness': '',%%00010    'system circulation': '',%%00010}%%00010%%00010layers1 = {%%00010    '1': 'SC_thickness',%%00010    '2': 'VE_thickness',%%00010    '3': 'DE_thickness',%%00010    '4': 'Sink_thickness',%%00010}%%00010%%00010layers2 = {%%00010    '1': 'SC_thickness',%%00010    '2': 'VE_thickness',%%00010    '3': 'DE_thickness',%%00010    '4': 'system circulation',%%00010}%%00010%%00010rootpath = &quot;/Users/bendeacon/Documents/PhD/Codes/Framework_Duo/Unilever_duo/SurreyDPK/example&quot;%%00010zz = rootpath + &quot;\\config\\&quot;%%00010# read interested parameters from config%%00010with open(zz + 'Caffeine_CE.cfg', 'r') as rf:%%00010    for line in rf:%%00010        line = line.split()%%00010        if not line or line[0] == '#':%%00010            continue%%00010        if line[0] == 'COMP' and line[1]!='0':%%00010            layer = layers1[line[1]]%%00010            properties1[layer] = line[2]%%00010            layer = layers2[line[1]]%%00010            properties2[layer] = line[2]%%00010%%00010entries = []%%00010root = tk.Tk()%%00010root.title(&quot;Specify skin parameters&quot;)%%00010cvs = tk.Canvas(root, width=340, height=450, relief='raised')%%00010cvs.pack()%%00010# GUI to view and modify parameters, and store them into the dataframe (df)%%00010pointer = 30%%00010%%00010loc = [90+i*70 for i in range(4)]%%00010%%00010label = tk.Label(root, text='Skin parameters')%%00010label.config(font=('helvetica', 12))%%00010cvs.create_window(170, pointer, window=label)%%00010%%00010product_type = table1.loc['values','product type']%%00010%%00010if (product_type == 'in-vitro(finite does)' or product_type == 'in-vitro(infinite does)'):%%00010%%00009for i, property in enumerate(properties1.keys()):%%00010%%00009%%00010%%00009    pointer = loc[i]%%00010%%00009    label = tk.Label(root, text=property)%%00010%%00009    label.config(font=('helvetica', 10))%%00010%%00009    cvs.create_window(170, pointer, window=label)%%00010%%00009    pointer += 30%%00010%%00009%%00010%%00009    dv = tk.StringVar() # default value%%00010%%00009    dv.set(properties1[property])%%00010%%00009    entry = tk.Entry(root, textvariable=dv)%%00010%%00009    cvs.create_window(170, pointer, window=entry, width=120)%%00010%%00009    entries.append(entry)%%00010#    df = pd.DataFrame(properties1, index=[&quot;values&quot;])%%00010#    def printer():%%00010#%%00009    for i, property in enumerate(properties1.keys()):%%00010#%%00009        entry = entries[i]%%00010#%%00009        df.loc['values', property] = entry.get()%%00010#%%00009    root.destroy()%%00009    %%00010else:%%00010%%00009for i, property in enumerate(properties2.keys()):%%00010%%00009%%00009%%00010%%00009%%00009pointer = loc[i]%%00010%%00009%%00009label = tk.Label(root, text=property)%%00010%%00009%%00009label.config(font=('helvetica', 10))%%00010%%00009%%00009cvs.create_window(170, pointer, window=label)%%00010%%00009%%00009pointer += 30%%00010%%00009%%00009%%00010%%00009%%00009dv = tk.StringVar() # default value%%00010%%00009%%00009dv.set(properties2[property])%%00010%%00009%%00009entry = tk.Entry(root, textvariable=dv)%%00010%%00009%%00009cvs.create_window(170, pointer, window=entry, width=120)%%00010%%00009%%00009entries.append(entry)%%00010%%00010def printer1():%%00010    for i, property in enumerate(properties1.keys()):%%00010%%00009    entry = entries[i]%%00010%%00009    df.loc['values', property] = entry.get()%%00010    root.destroy()%%00009    %%00010%%00010def printer2():%%00010    for i, property in enumerate(properties2.keys()):%%00010%%00009    entry = entries[i]%%00010%%00009    df.loc['values', property] = entry.get()%%00010    root.destroy()%%00010%%00010if (product_type == 'in-vitro(finite does)' or product_type == 'in-vitro(infinite does)'):%%00010    df = pd.DataFrame(properties1, index=[&quot;values&quot;])  %%00010    button = tk.Button(text='Submit &amp; Continue', command=printer1, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer+70, window=button)%%00010else:%%00010    df = pd.DataFrame(properties2, index=[&quot;values&quot;])  %%00010    button = tk.Button(text='Submit &amp; Continue', command=printer2, font=('helvetica', 10))%%00010    cvs.create_window(170, pointer+70, window=button)%%00010    %%00010root.mainloop()%%00010%%00010output_table_1 = pd.concat([table1, df], axis = 1)%%00010%%00010%%00010%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="skin parameter GUI"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="593"/>
        <entry key="y-coordinate" type="xint" value="182"/>
        <entry key="width" type="xint" value="107"/>
        <entry key="height" type="xint" value="15"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.1.0.v202303131021"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.1.0.v202307110639"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script (legacy)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
