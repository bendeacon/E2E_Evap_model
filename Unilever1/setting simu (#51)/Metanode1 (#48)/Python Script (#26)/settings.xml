<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import tkinter as tk%%00010from tkinter import ttk%%00010import pandas as pd%%00010pd.options.mode.chained_assignment = None  # default='warn'%%00010import os%%00010import pymysql%%00010%%00010# connect database%%00010db = pymysql.connect(host='localhost',%%00010                     user='root',%%00010                     password='',%%00010                     database='knimeproject')%%00010%%00010cursor = db.cursor()%%00010%%00010table1 = input_table_1.copy()%%00010# dictionary of properties%%00010properties1 = {%%00010%%00009'smiles': '',%%00010%%00009'active fraction': '',%%00010}%%00010%%00010properties2 = {%%00010%%00009'cosolvent': '',%%00010%%00009'mole_fraction_of_cosolvent': '',%%00010%%00009'mole_fraction_of_water': '', %%00010%%00009'mole_fraction_of_oil': '',%%00010%%00009'mole_fraction_of_surfactants': '',%%00010%%00009'mole_fraction_of_insoluble': '',%%00010%%00009'pH': ''%%00010}%%00010%%00010properties3 = {%%00010    'active_name': '',%%00010%%00009'smiles': '',%%00010%%00009'active fraction': '',%%00010%%00009'formulation name': '',    %%00010%%00009'cosolvent': '',%%00010%%00009'mole_fraction_of_cosolvent': '',%%00010%%00009'mole_fraction_of_water': '', %%00010%%00009'mole_fraction_of_oil': '',%%00010%%00009'mole_fraction_of_surfactants': '',%%00010%%00009'mole_fraction_of_insoluble': '',%%00010%%00009'pH': ''%%00009%%00010}%%00010%%00010entries = []%%00010dvlist = []%%00010root = tk.Tk()%%00010root.title(&quot;Specify active and formulation&quot;)%%00010cvs = tk.Canvas(root, width=500, height=700, relief='raised')%%00010cvs.pack()%%00010# GUI to view and modify parameters, and store them into the dataframe (df)%%00010pointer = 30%%00010%%00010# GUI for active%%00010sql = &quot;SELECT * FROM ACTIVE&quot;%%00010%%00010try:%%00010   # execute sql%%00010   cursor.execute(sql)%%00010   # get all data%%00010   smiles = cursor.fetchall()%%00010except:%%00010   print (&quot;Error: unable to fetch data&quot;)%%00010   %%00010activeNameList = []%%00010for smile in smiles:%%00010    activeNameList.append(smile[0])%%00010%%00010label = tk.Label(root, text='Active name')%%00010label.config(font=('helvetica', 10))%%00010cvs.create_window(250, pointer, window=label)%%00010pointer += 30%%00010dv = ttk.Combobox(root)%%00010dv['value'] = activeNameList%%00010cvs.create_window(250, pointer, window=dv, width=150)%%00010entries.append(dv)%%00010dvlist.append(dv)%%00010%%00010# GUI for refresh button%%00010def refresh1():%%00010    sql = 'SELECT * FROM ACTIVE WHERE NAME = &quot;'+entries[0].get()+'&quot;' %%00010    try:%%00010        # execute sql%%00010        cursor.execute(sql)%%00010        # get all data%%00010        results = cursor.fetchall()%%00010    except:%%00010        print (&quot;Error: unable to fetch data&quot;)%%00010    for i, property in enumerate(properties1.keys()):%%00010        D = i%2%%00010        if results:%%00010            dvlist[i+1].set(results[0][i+1])%%00010            cvs.create_window(130+D*230, pointer1, window=entries[i+1], width=210)%%00010%%00010button = tk.Button(text='⟳', command=refresh1, font=('helvetica', 10))%%00010cvs.create_window(350, pointer, window=button)%%00010%%00010sql = 'SELECT * FROM ACTIVE WHERE NAME = &quot;'+entries[0].get()+'&quot;' %%00010%%00010try:%%00010   # execute sql%%00010   cursor.execute(sql)%%00010   # get all data%%00010   results = cursor.fetchall()%%00010except:%%00010   print (&quot;Error: unable to fetch data&quot;)%%00010%%00010pointer += 40%%00010pointer1 = pointer + 30%%00010for i, property in enumerate(properties1.keys()):%%00010    D = i%2%%00010    label = tk.Label(root, text=property)%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(130+D*230, pointer, window=label)%%00010    dv = tk.StringVar() # default value%%00010    if results:%%00010        dv.set(results[0][i+1])%%00010    entry = tk.Entry(root, textvariable=dv)%%00010    cvs.create_window(130+D*230, pointer1, window=entry, width=210)%%00010    entries.append(entry)%%00010    dvlist.append(dv)%%00010%%00010# GUI for formulation chassis name%%00010sql = &quot;SELECT * FROM FORMULATION&quot;%%00010%%00010try:%%00010   # execute sql%%00010   cursor.execute(sql)%%00010   # get all data%%00010   formulations = cursor.fetchall()%%00010except:%%00010   print (&quot;Error: unable to fetch data&quot;)%%00010%%00010formulationNameList = []%%00010for formulation in formulations:%%00010    formulationNameList.append(formulation[0])%%00010    %%00010pointer = 190%%00010label = tk.Label(root, text='Formulation chassis name')%%00010label.config(font=('helvetica', 10))%%00010cvs.create_window(250, pointer, window=label)%%00010pointer += 30%%00010dv = ttk.Combobox(root)%%00010dv['value'] = formulationNameList%%00010cvs.create_window(250, pointer, window=dv, width=150)%%00010entries.append(dv)%%00010dvlist.append(dv)%%00010%%00010loc = [280+i*80 for i in range(7)]%%00010# GUI for refresh2 button%%00010def refresh2():%%00010    sql = 'SELECT * FROM FORMULATION WHERE NAME = &quot;'+entries[3].get()+'&quot;' %%00010    try:%%00010        # execute sql%%00010        cursor.execute(sql)%%00010        # get all data%%00010        results = cursor.fetchall()%%00010    except:%%00010        print (&quot;Error: unable to fetch data&quot;)%%00010    for i, property in enumerate(properties2.keys()):%%00010        D, R = i//4, i%4%%00010        if results:%%00010            dvlist[i+4].set(results[0][i+1])%%00010            cvs.create_window(130+D*230, loc[R]+30, window=entries[i+4], width=200)%%00010%%00010button = tk.Button(text='⟳', command=refresh2, font=('helvetica', 10))%%00010cvs.create_window(350, pointer, window=button)%%00010%%00010for i, property in enumerate(properties2.keys()):%%00010%%00010    D, R = i//4, i%4%%00010    pointer = loc[R]%%00010    label = tk.Label(root, text=property)%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(130+D*230, pointer, window=label)%%00010    pointer += 30%%00010    if property == 'cosolvent':%%00010        dv = ttk.Combobox(root)%%00010        dv['value'] = table1['cosolvent'].values.tolist()%%00010        cvs.create_window(130+D*230, pointer, window=dv, width=200)%%00010        entries.append(dv)%%00010        dvlist.append(dv)%%00010    else:%%00010%%00009    dv = tk.StringVar() # default value%%00010%%00009    dv.set(properties2[property])%%00010%%00009    entry = tk.Entry(root, textvariable=dv)%%00010%%00009    cvs.create_window(130+D*230, pointer, window=entry, width=200)%%00010%%00009    entries.append(entry)%%00010%%00009    dvlist.append(dv)%%00010    %%00010df = pd.DataFrame(properties3, index=[&quot;values&quot;])%%00010%%00010#GUI for submit button%%00010def printer():%%00010    entry = entries[0]%%00010    df.loc['values', 'active_name'] = entry.get()%%00010    for i, property in enumerate(properties1.keys()):%%00010        entry = entries[i+1]%%00010        df.loc['values', property] = entry.get()%%00010    entry = entries[3]%%00010    df.loc['values', 'formulation name'] = entry.get()   %%00010    for i, property in enumerate(properties2.keys()):%%00010        entry = entries[i+4]%%00010        df.loc['values', property] = entry.get()%%00010    root.destroy()%%00010%%00010button = tk.Button(text='Submit &amp; Continue', command=printer, font=('helvetica', 10))%%00010cvs.create_window(250, pointer+140, window=button)%%00010#%%00010root.mainloop()%%00010#%%00010cosolvent = df.loc['values', 'cosolvent']%%00010#%%00010# filter the data table using the entered cosolvent%%00010value_list = [cosolvent]%%00010boolean_series = table1.cosolvent.isin(value_list)%%00010filtered_table = table1[boolean_series]%%00010Index = filtered_table.index.values[0]%%00010filtered_table.rename(index={Index: 'values'}, inplace=True)%%00010filtered_table.drop(['cosolvent'],axis=1, inplace=True)%%00010%%00010input_table_2.rename(index={Index: 'values'}, inplace=True)%%00010%%00010%%00010#close database%%00010db.close()%%00010%%00010output_table_1 = pd.concat([df, filtered_table, input_table_2], axis = 1)%%00010%%00010%%00010%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="active and formulation GUI"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="254"/>
        <entry key="y-coordinate" type="xint" value="182"/>
        <entry key="width" type="xint" value="144"/>
        <entry key="height" type="xint" value="15"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.1.0.v202303131021"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.1.0.v202307110639"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_1">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script (legacy)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
