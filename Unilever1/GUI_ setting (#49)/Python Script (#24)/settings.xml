<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import tkinter as tk%%00010import pandas as pd%%00010import os%%00010%%00010df = input_table_1.copy()%%00010#df = df.reset_index(drop=True)%%00010%%00010print(df)%%00010%%00010# dictionary of properties%%00010properties = {%%00010    'Vehicle_thickness': '',%%00010    'SC_thickness': '',%%00010    'VE_thickness': '',%%00010    'DE_thickness': '',%%00010    'Sink_thickness': '',%%00010    'CHEM_MW': '',%%00010    'CHEM_KOW': '',%%00010    'KW_VH':''%%00010}%%00010%%00010layers = {%%00010    '0': 'Vehicle_thickness',%%00010    '1': 'SC_thickness',%%00010    '2': 'VE_thickness',%%00010    '3': 'DE_thickness',%%00010    '4': 'Sink_thickness'%%00010}%%00010%%00010rootpath = &quot;~/E2E_project/source_code/SurreyDPK/example&quot;%%00010zz = rootpath + &quot;\\config\\&quot;%%00010# read interested parameters from config%%00010with open(zz + 'Caffeine_CE.cfg', 'r') as rf:%%00010    for line in rf:%%00010        line = line.split()%%00010        if not line or line[0] == '#':%%00010            continue%%00010        if line[0] == 'COMP':%%00010            layer = layers[line[1]]%%00010            properties[layer] = line[2]%%00010        elif line[0] == 'CHEM_MW':%%00010            # calculated value has priority%%00010            if 'CHEM_MW' in df.columns:%%00010                properties['CHEM_MW'] = df.loc['Row0', 'CHEM_MW']%%00010            else:%%00010                properties['CHEM_MW'] = line[1]%%00010        elif line[0] == 'CHEM_KOW':%%00010            if 'CHEM_KOW' in df.columns:%%00010                properties['CHEM_KOW'] = df.loc['Row0', 'CHEM_KOW']%%00010            else:%%00010                properties['CHEM_KOW'] = line[1]%%00010        elif line[0] == 'KW_VH':%%00010        %%00009if 'KW_VH' in df.columns:%%00010        %%00009%%00009properties['KW_VH'] = df.loc['Row0', 'KW_VH']%%00010        %%00009else:%%00010        %%00009%%00009properties['KW_VH'] = line[1]%%00010        elif line[0] == 't_end':%%00010            properties['t_end'] = line[1]%%00010        elif line[0] == 'Nsteps':%%00010            properties['Nsteps'] = line[1]%%00010%%00010entries = []%%00010root = tk.Tk()%%00010root.title(&quot;Specify Key Chemical Properties&quot;)%%00010cvs = tk.Canvas(root, width=500, height=600, relief='raised')%%00010cvs.pack()%%00010# GUI to view and modify parameters, and store them into the dataframe (df)%%00010pointer = 50%%00010%%00010loc = [100+i*75 for i in range(5)]%%00010%%00010%%00010label = tk.Label(root, text='Properties values (numerical)')%%00010label.config(font=('helvetica', 12))%%00010cvs.create_window(250, pointer, window=label)%%00010%%00010for i, property in enumerate(properties.keys()):%%00010%%00010    D, R = i//5, i%5%%00010    pointer = loc[R]%%00010    label = tk.Label(root, text=property)%%00010    label.config(font=('helvetica', 10))%%00010    cvs.create_window(150+D*200, pointer, window=label)%%00010    pointer += 25%%00010    dv = tk.StringVar() # default value%%00010    dv.set(properties[property])%%00010    entry = tk.Entry(root, textvariable=dv)%%00010    cvs.create_window(150+D*200, pointer, window=entry)%%00010    entries.append(entry)%%00010    # pointer += 50%%00010%%00010%%00010def printer():%%00010    for i, property in enumerate(properties.keys()):%%00010        entry = entries[i]%%00010        df.loc['Row0', property] = entry.get()%%00010    root.destroy()%%00010%%00010button = tk.Button(text='Submit &amp; Continue', command=printer, font=('helvetica', 12))%%00010cvs.create_window(250, loc[-1]+100, window=button)%%00010%%00010root.mainloop()%%00010%%00010print(df)%%00010%%00010output_table_1 = df%%00010%%00010%%00010%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="simulation parameter GUI"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="136"/>
        <entry key="y-coordinate" type="xint" value="268"/>
        <entry key="width" type="xint" value="173"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.5.0.v202111232310"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.5.1.v202201171150"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
